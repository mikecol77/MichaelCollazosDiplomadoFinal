{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/MICHAEL/Documents/MichaelCollazosDiplomadoFinal/MichaelCollazosDiplomadoFinal/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { TasksService } from '../../services/tasks.service';\nimport { NotificationService } from '../../services/notification.service';\nlet TaskListComponent = class TaskListComponent {\n  constructor(tasksService, notify) {\n    this.tasksService = tasksService;\n    this.notify = notify;\n    this.tasks = [];\n    // Crear\n    this.titleCtrl = new FormControl('', {\n      nonNullable: true,\n      validators: [Validators.required, Validators.minLength(2)]\n    });\n    this.priorityCtrl = new FormControl('low', {\n      nonNullable: true\n    });\n    this.dueCtrl = new FormControl(null); // 'YYYY-MM-DD' o null\n    // Editar título\n    this.editCtrl = new FormControl('', {\n      nonNullable: true,\n      validators: [Validators.required, Validators.minLength(2)]\n    });\n    this.editId = null;\n    // Buscar/Ordenar/Filtrar\n    this.searchCtrl = new FormControl('', {\n      nonNullable: true\n    });\n    this.sortCtrl = new FormControl('recent', {\n      nonNullable: true\n    });\n    this.filter = 'all';\n    // Notificaciones: intervalo configurable\n    this.reminderCtrl = new FormControl(Number(localStorage.getItem('reminderMs') || '0'), {\n      nonNullable: true\n    });\n    this.reminderTimer = null; // setInterval id\n    this.loading = false;\n    this.errorMsg = '';\n  }\n  ngOnInit() {\n    this.fetch();\n    // reintenta cada vez que la pestaña vuelve al frente\n    document.addEventListener('visibilitychange', () => {\n      if (!document.hidden) this.notify.tryNotify(this.tasks);\n    });\n    // aplica el intervalo guardado (si existe)\n    this.applyReminderSchedule();\n    // si cambias el selector manualmente y no usas (change) en el HTML, podrías suscribirte aquí:\n    // this.reminderCtrl.valueChanges.subscribe(() => this.onChangeReminder());\n  }\n  ngOnDestroy() {\n    this.stopReminderSchedule();\n  }\n  // =================== Helpers ===================\n  /** Convierte 'YYYY-MM-DD' a ISO usando 12:00 hora local (evita desfase de día). */\n  dateOnlyToIsoAtNoonLocal(dateStr) {\n    const [y, m, d] = dateStr.split('-').map(Number);\n    const localNoon = new Date(y, m - 1, d, 12, 0, 0, 0);\n    return localNoon.toISOString();\n  }\n  applyReminderSchedule() {\n    this.stopReminderSchedule();\n    const ms = this.reminderCtrl.value;\n    if (!ms) return; // desactivado\n    // Dispara una primera evaluación inmediata para dar feedback\n    this.notify.remindSummary(this.tasks);\n    this.reminderTimer = setInterval(() => {\n      this.notify.remindSummary(this.tasks);\n    }, ms);\n  }\n  stopReminderSchedule() {\n    if (this.reminderTimer) {\n      clearInterval(this.reminderTimer);\n      this.reminderTimer = null;\n    }\n  }\n  // =================== Derivados ===================\n  get counts() {\n    const total = this.tasks.length;\n    const done = this.tasks.filter(t => t.done).length;\n    return {\n      total,\n      done,\n      pending: total - done\n    };\n  }\n  setFilter(mode) {\n    this.filter = mode;\n  }\n  /** Progreso global (0–100) + tono para pintar la barra */\n  get progress() {\n    const {\n      total,\n      done\n    } = this.counts;\n    const pct = total ? Math.round(done / total * 100) : 0;\n    const tone = pct >= 80 ? 'ok' : pct >= 40 ? 'mid' : 'low';\n    return {\n      pct,\n      tone\n    };\n  }\n  /** Lista que se muestra (filtro + búsqueda + orden) */\n  get viewTasks() {\n    const q = (this.searchCtrl.value || '').toLowerCase().trim();\n    let list = this.tasks.filter(t => {\n      const passFilter = this.filter === 'all' ? true : this.filter === 'done' ? t.done : !t.done;\n      const passSearch = !q || (t.title || '').toLowerCase().includes(q);\n      return passFilter && passSearch;\n    });\n    switch (this.sortCtrl.value) {\n      case 'az':\n        list = list.sort((a, b) => (a.title || '').localeCompare(b.title || ''));\n        break;\n      case 'due':\n        list = list.sort((a, b) => (a.dueDate ? +new Date(a.dueDate) : Infinity) - (b.dueDate ? +new Date(b.dueDate) : Infinity));\n        break;\n      case 'priority':\n        const rank = {\n          high: 0,\n          med: 1,\n          low: 2\n        };\n        list = list.sort((a, b) => (rank[a.priority || 'low'] ?? 2) - (rank[b.priority || 'low'] ?? 2));\n        break;\n      default:\n        // 'recent'\n        list = list.sort((a, b) => +new Date(b.createdAt) - +new Date(a.createdAt));\n    }\n    return list;\n  }\n  // =================== CRUD ===================\n  fetch() {\n    this.loading = true;\n    this.errorMsg = '';\n    this.tasksService.list().subscribe({\n      next: data => {\n        this.tasks = data;\n        this.loading = false;\n        this.notify.tryNotify(this.tasks); // \"una vez al día\"\n      },\n      error: () => {\n        this.errorMsg = 'No se pudieron cargar las tareas';\n        this.loading = false;\n      }\n    });\n  }\n  addTask() {\n    if (this.titleCtrl.invalid) return;\n    const title = this.titleCtrl.value.trim();\n    if (!title) return;\n    const priority = this.priorityCtrl.value;\n    const rawDate = this.dueCtrl.value; // 'YYYY-MM-DD' o null\n    const dueDate = rawDate ? this.dateOnlyToIsoAtNoonLocal(rawDate) : null;\n    this.tasksService.create(title, priority, dueDate).subscribe({\n      next: t => {\n        this.tasks.unshift(t);\n        this.titleCtrl.reset('', {\n          emitEvent: false\n        });\n        this.titleCtrl.markAsPristine();\n        this.titleCtrl.markAsUntouched();\n        this.priorityCtrl.setValue('low');\n        this.dueCtrl.setValue(null);\n        this.notify.tryNotify(this.tasks); // por si crea algo para hoy / vencido\n      },\n      error: () => {\n        this.errorMsg = 'Error creando la tarea';\n      }\n    });\n  }\n  toggleDone(task) {\n    this.tasksService.toggle(task._id).subscribe({\n      next: t => {\n        task.done = t.done;\n        this.notify.tryNotify(this.tasks);\n      },\n      error: () => {\n        this.errorMsg = 'Error actualizando la tarea';\n      }\n    });\n  }\n  // Editar título\n  startEdit(task) {\n    this.editId = task._id;\n    this.editCtrl.setValue(task.title);\n  }\n  cancelEdit() {\n    this.editId = null;\n    this.editCtrl.reset('', {\n      emitEvent: false\n    });\n  }\n  saveEdit(task) {\n    if (!this.editId || this.editCtrl.invalid) return;\n    const newTitle = this.editCtrl.value.trim();\n    if (!newTitle) return;\n    this.tasksService.updateTitle(this.editId, newTitle).subscribe({\n      next: t => {\n        task.title = t.title;\n        this.editId = null;\n        this.editCtrl.reset('', {\n          emitEvent: false\n        });\n      },\n      error: () => {\n        this.errorMsg = 'Error guardando cambios';\n      }\n    });\n  }\n  // Actualizar prioridad/fecha (si quisieras inline en el futuro)\n  updateMeta(task, change) {\n    const payload = {\n      ...change\n    };\n    if (payload.dueDate && typeof payload.dueDate === 'string' && payload.dueDate.length === 10 && !payload.dueDate.includes('T')) {\n      payload.dueDate = this.dateOnlyToIsoAtNoonLocal(payload.dueDate);\n    }\n    this.tasksService.updateMeta(task._id, payload).subscribe({\n      next: t => {\n        task.priority = t.priority;\n        task.dueDate = t.dueDate;\n        this.notify.tryNotify(this.tasks);\n      },\n      error: () => {\n        this.errorMsg = 'Error actualizando datos';\n      }\n    });\n  }\n  deleteTask(task) {\n    if (!confirm(`¿Eliminar la tarea \"${task.title}\"?`)) return;\n    this.tasksService.remove(task._id).subscribe({\n      next: () => {\n        this.tasks = this.tasks.filter(x => x._id !== task._id);\n        this.notify.tryNotify(this.tasks);\n      },\n      error: () => {\n        this.errorMsg = 'Error eliminando la tarea';\n      }\n    });\n  }\n  clearCompleted() {\n    if (!confirm('¿Eliminar todas las tareas completadas?')) return;\n    this.tasksService.clearCompleted().subscribe({\n      next: () => {\n        this.tasks = this.tasks.filter(t => !t.done);\n        this.notify.tryNotify(this.tasks);\n      },\n      error: () => {\n        this.errorMsg = 'No se pudieron limpiar las completadas';\n      }\n    });\n  }\n  isOverdue(t) {\n    return !!t.dueDate && !t.done && new Date(t.dueDate) < new Date(new Date().toDateString());\n  }\n  // =================== Notificaciones: UI helpers ===================\n  get notifEnabled() {\n    return this.notify.enabled;\n  }\n  enableNotifications() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const res = yield _this.notify.requestPermission();\n      if (res === 'granted') {\n        _this.notify.showSample();\n        _this.notify.tryNotify(_this.tasks);\n      } else {\n        alert('No se activaron las notificaciones del navegador.');\n      }\n    })();\n  }\n  onChangeReminder() {\n    // guarda selección y aplica el intervalo\n    localStorage.setItem('reminderMs', String(this.reminderCtrl.value || 0));\n    this.applyReminderSchedule();\n  }\n  testNotification() {\n    this.notify.showSample();\n  }\n};\nTaskListComponent = __decorate([Component({\n  selector: 'app-task-list',\n  templateUrl: './task-list.component.html',\n  styleUrls: ['./task-list.component.css']\n}), __metadata(\"design:paramtypes\", [TasksService, NotificationService])], TaskListComponent);\nexport { TaskListComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}