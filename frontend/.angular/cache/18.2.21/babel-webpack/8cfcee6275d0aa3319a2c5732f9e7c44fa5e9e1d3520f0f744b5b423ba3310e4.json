{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/MICHAEL/Documents/MichaelCollazosDiplomadoFinal/MichaelCollazosDiplomadoFinal/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nexport let NotificationService = /*#__PURE__*/(() => {\n  class NotificationService {\n    get supported() {\n      return typeof window !== 'undefined' && 'Notification' in window;\n    }\n    get permission() {\n      return this.supported ? Notification.permission : 'denied';\n    }\n    get enabled() {\n      return this.permission === 'granted';\n    }\n    requestPermission() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        if (!_this.supported) return 'denied';\n        if (_this.permission === 'granted') return 'granted';\n        return yield Notification.requestPermission();\n      })();\n    }\n    notify(title, body) {\n      if (!this.enabled) return;\n      try {\n        new Notification(title, {\n          body\n        });\n      } catch {}\n    }\n    // ---------- KPIs ----------\n    computeKpis(tasks) {\n      const today = this.startOfDay(new Date());\n      const in3 = new Date(today);\n      in3.setDate(today.getDate() + 3);\n      let dueToday = 0,\n        overdue = 0,\n        soon = 0;\n      for (const t of tasks || []) {\n        if (!t?.dueDate || t.done) continue;\n        const d = this.startOfDay(new Date(t.dueDate));\n        if (d.getTime() === today.getTime()) dueToday++;else if (d.getTime() < today.getTime()) overdue++;else if (d.getTime() > today.getTime() && d.getTime() <= in3.getTime()) soon++;\n      }\n      return {\n        dueToday,\n        overdue,\n        soon\n      };\n    }\n    /** Notificaciones \"una vez al d√≠a\" (cuando entras o cambian las tareas). */\n    tryNotify(tasks) {\n      if (!this.enabled || !Array.isArray(tasks)) return;\n      const {\n        dueToday,\n        overdue,\n        soon\n      } = this.computeKpis(tasks);\n      const keyBase = new Date().toISOString().slice(0, 10); // YYYY-MM-DD\n      if (dueToday > 0 && sessionStorage.getItem(`notified:today:${keyBase}`) !== '1') {\n        this.notify('Tareas para hoy', `Tienes ${dueToday} tarea(s) que vencen hoy.`);\n        sessionStorage.setItem(`notified:today:${keyBase}`, '1');\n      }\n      if (overdue > 0 && sessionStorage.getItem(`notified:overdue:${keyBase}`) !== '1') {\n        this.notify('Tareas vencidas', `Tienes ${overdue} tarea(s) vencida(s).`);\n        sessionStorage.setItem(`notified:overdue:${keyBase}`, '1');\n      }\n      if (soon > 0 && sessionStorage.getItem(`notified:soon:${keyBase}`) !== '1') {\n        this.notify('Pr√≥ximos vencimientos', `Hay ${soon} tarea(s) que vencen en los pr√≥ximos 3 d√≠as.`);\n        sessionStorage.setItem(`notified:soon:${keyBase}`, '1');\n      }\n    }\n    /** üîî NUEVO: Recordatorio resumido (sin l√≠mite diario), pensado para un intervalo configurable. */\n    remindSummary(tasks) {\n      if (!this.enabled || !Array.isArray(tasks)) return;\n      const {\n        dueToday,\n        overdue,\n        soon\n      } = this.computeKpis(tasks);\n      if (overdue > 0) {\n        this.notify('Recordatorio: tareas vencidas', `Tienes ${overdue} tarea(s) vencida(s).`);\n        return;\n      }\n      if (dueToday > 0) {\n        this.notify('Recordatorio para hoy', `Hoy vencen ${dueToday} tarea(s).`);\n        return;\n      }\n      if (soon > 0) {\n        this.notify('Pr√≥ximos vencimientos', `Hay ${soon} tarea(s) para los pr√≥ximos 3 d√≠as.`);\n        return;\n      }\n      // Si no hay nada relevante, no notifica.\n    }\n    showSample() {\n      this.notify('Notificaciones activas ‚úÖ', 'Ejemplo de aviso del Gestor de Tareas');\n    }\n    startOfDay(d) {\n      const x = new Date(d);\n      x.setHours(0, 0, 0, 0);\n      return x;\n    }\n    static {\n      this.…µfac = function NotificationService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || NotificationService)();\n      };\n    }\n    static {\n      this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n        token: NotificationService,\n        factory: NotificationService.…µfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return NotificationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}