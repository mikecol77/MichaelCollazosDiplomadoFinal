{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\nlet AuthComponent = class AuthComponent {\n  constructor(fb, auth, router) {\n    this.fb = fb;\n    this.auth = auth;\n    this.router = router;\n    this.isLogin = true;\n    this.msg = '';\n    this.err = '';\n    this.registerForm = this.fb.group({\n      name: ['', [Validators.required, Validators.minLength(2)]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  toggle(mode) {\n    this.isLogin = mode === 'login';\n    this.msg = '';\n    this.err = '';\n  }\n  onRegister() {\n    this.msg = '';\n    this.err = '';\n    if (this.registerForm.invalid) return;\n    this.auth.register(this.registerForm.value).subscribe({\n      next: () => {\n        this.msg = 'Registro exitoso. Redirigiendo...';\n        this.router.navigate(['/dashboard']);\n      },\n      error: e => {\n        this.err = e?.error?.message || 'Error en registro';\n      }\n    });\n  }\n  onLogin() {\n    this.msg = '';\n    this.err = '';\n    if (this.loginForm.invalid) return;\n    this.auth.login(this.loginForm.value).subscribe({\n      next: () => {\n        this.msg = 'Login exitoso. Redirigiendo...';\n        this.router.navigate(['/dashboard']);\n      },\n      error: e => {\n        this.err = e?.error?.message || 'Credenciales inv√°lidas';\n      }\n    });\n  }\n};\nAuthComponent = __decorate([Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.css']\n}), __metadata(\"design:paramtypes\", [FormBuilder, AuthService, Router])], AuthComponent);\nexport { AuthComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}