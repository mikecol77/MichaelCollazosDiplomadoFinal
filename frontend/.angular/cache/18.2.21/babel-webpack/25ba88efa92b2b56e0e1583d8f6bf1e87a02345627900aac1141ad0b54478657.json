{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/MICHAEL/Documents/MichaelCollazosDiplomadoFinal/MichaelCollazosDiplomadoFinal/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nexport let NotificationService = /*#__PURE__*/(() => {\n  class NotificationService {\n    // ---- Soporte / permiso ----\n    get supported() {\n      return typeof window !== 'undefined' && 'Notification' in window;\n    }\n    get permission() {\n      return this.supported ? Notification.permission : 'denied';\n    }\n    get enabled() {\n      return this.permission === 'granted';\n    }\n    requestPermission() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        if (!_this.supported) return 'denied';\n        if (_this.permission === 'granted') return 'granted';\n        return yield Notification.requestPermission();\n      })();\n    }\n    // ---- Enviar notificación ----\n    notify(title, body) {\n      if (!this.enabled) return;\n      try {\n        new Notification(title, {\n          body\n        });\n      } catch {}\n    }\n    // ---- KPI de tareas ----\n    computeKpis(tasks) {\n      const today = this.startOfDay(new Date());\n      const in3 = new Date(today);\n      in3.setDate(today.getDate() + 3);\n      let dueToday = 0,\n        overdue = 0,\n        soon = 0,\n        pending = 0;\n      for (const t of tasks || []) {\n        if (!t) continue;\n        if (!t.done) pending++;\n        if (!t?.dueDate || t.done) continue;\n        const d = this.startOfDay(new Date(t.dueDate));\n        if (d.getTime() === today.getTime()) dueToday++;else if (d.getTime() < today.getTime()) overdue++;else if (d.getTime() > today.getTime() && d.getTime() <= in3.getTime()) soon++;\n      }\n      return {\n        dueToday,\n        overdue,\n        soon,\n        pending\n      };\n    }\n    // ---- Construye cuerpo multi-línea (resumen general) ----\n    buildSummaryBody(tasks) {\n      const {\n        dueToday,\n        overdue,\n        soon,\n        pending\n      } = this.computeKpis(tasks);\n      const s = n => n === 1 ? '' : 's';\n      const lines = [];\n      if (overdue > 0) lines.push(`Tienes ${overdue} tarea${s(overdue)} vencida${s(overdue)}.`);\n      if (dueToday > 0) lines.push(`Hoy vence${s(dueToday)} ${dueToday} tarea${s(dueToday)}.`);\n      if (soon > 0) lines.push(`Tienes ${soon} tarea${s(soon)} dentro de los próximos 3 días.`);\n      if (pending > 0) lines.push(`Pendientes totales: ${pending}.`);\n      if (lines.length === 0) return null;\n      return lines.map(l => `• ${l}`).join('\\n'); // viñetas y saltos de línea\n    }\n    /** Notificación “una vez al día” con resumen general. */\n    tryNotify(tasks) {\n      if (!this.enabled || !Array.isArray(tasks)) return;\n      const body = this.buildSummaryBody(tasks);\n      if (!body) return;\n      const key = new Date().toISOString().slice(0, 10); // YYYY-MM-DD\n      const flag = sessionStorage.getItem(`notified:summary:${key}`);\n      if (flag === '1') return;\n      this.notify('Resumen de tus tareas', body);\n      sessionStorage.setItem(`notified:summary:${key}`, '1');\n    }\n    /** Recordatorio resumido (para usar con intervalos configurables). */\n    remindSummary(tasks) {\n      if (!this.enabled || !Array.isArray(tasks)) return;\n      const body = this.buildSummaryBody(tasks);\n      if (body) this.notify('Recordatorio de tareas', body);\n    }\n    // ---- Ejemplo / helpers ----\n    showSample() {\n      this.notify('Notificaciones activas ✅', 'Ejemplo de aviso del Gestor de Tareas');\n    }\n    startOfDay(d) {\n      const x = new Date(d);\n      x.setHours(0, 0, 0, 0);\n      return x;\n    }\n    static {\n      this.ɵfac = function NotificationService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || NotificationService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: NotificationService,\n        factory: NotificationService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return NotificationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}