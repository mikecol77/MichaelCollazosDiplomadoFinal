{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component } from '@angular/core';\nimport { TasksService } from '../../services/tasks.service';\nlet CalendarComponent = class CalendarComponent {\n  constructor(tasksService) {\n    this.tasksService = tasksService;\n    this.viewDate = new Date(); // mes que se está viendo\n    this.weeks = []; // 6 filas x 7 columnas\n    this.selectedKey = null;\n    this.selectedTasks = [];\n    this.allTasks = [];\n    this.tasksByDay = new Map();\n  }\n  ngOnInit() {\n    this.loadTasks();\n  }\n  // ---------- Carga y agrupación ----------\n  loadTasks() {\n    this.tasksService.list().subscribe({\n      next: data => {\n        this.allTasks = data || [];\n        this.groupByDay();\n        this.buildCalendar();\n      },\n      error: () => {\n        this.allTasks = [];\n        this.tasksByDay.clear();\n        this.buildCalendar();\n      }\n    });\n  }\n  groupByDay() {\n    this.tasksByDay.clear();\n    for (const t of this.allTasks) {\n      if (!t?.dueDate) continue;\n      const key = this.keyFromISO(t.dueDate);\n      if (!this.tasksByDay.has(key)) this.tasksByDay.set(key, []);\n      this.tasksByDay.get(key).push(t);\n    }\n  }\n  // ---------- Calendario ----------\n  buildCalendar() {\n    const y = this.viewDate.getFullYear();\n    const m = this.viewDate.getMonth();\n    const first = new Date(y, m, 1);\n    const start = new Date(first);\n    // Comienza el domingo: 0=dom,1=lun,...6=sáb\n    const offset = first.getDay(); // 0..6\n    start.setDate(first.getDate() - offset);\n    const weeks = [];\n    let cursor = new Date(start);\n    for (let w = 0; w < 6; w++) {\n      const row = [];\n      for (let d = 0; d < 7; d++) {\n        const key = this.keyFromDate(cursor);\n        row.push({\n          date: new Date(cursor),\n          inMonth: cursor.getMonth() === m,\n          key,\n          tasks: this.tasksByDay.get(key) || []\n        });\n        cursor.setDate(cursor.getDate() + 1);\n      }\n      weeks.push(row);\n    }\n    this.weeks = weeks;\n    // Si hay un día seleccionado y ya no está en el mes, limpiar panel\n    if (this.selectedKey) {\n      const stillVisible = weeks.flat().some(c => c.key === this.selectedKey);\n      if (!stillVisible) {\n        this.selectedKey = null;\n        this.selectedTasks = [];\n      }\n    }\n  }\n  // ---------- Navegación ----------\n  prevMonth() {\n    this.viewDate = new Date(this.viewDate.getFullYear(), this.viewDate.getMonth() - 1, 1);\n    this.buildCalendar();\n  }\n  nextMonth() {\n    this.viewDate = new Date(this.viewDate.getFullYear(), this.viewDate.getMonth() + 1, 1);\n    this.buildCalendar();\n  }\n  goToday() {\n    this.viewDate = new Date();\n    this.buildCalendar();\n  }\n  // ---------- Selección de día ----------\n  openDay(cell) {\n    this.selectedKey = cell.key;\n    this.selectedTasks = [...cell.tasks].sort((a, b) => {\n      const ap = a.priority || 'low';\n      const bp = b.priority || 'low';\n      const rank = {\n        high: 0,\n        med: 1,\n        low: 2\n      };\n      return (rank[ap] ?? 2) - (rank[bp] ?? 2);\n    });\n  }\n  // ---------- Etiquetas y utilidades ----------\n  monthLabel() {\n    const fmt = new Intl.DateTimeFormat('es-ES', {\n      month: 'long',\n      year: 'numeric'\n    });\n    return fmt.format(this.viewDate);\n  }\n  dayNames() {\n    // Domingo primero, en español corto\n    return ['Dom', 'Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb'];\n  }\n  isToday(cell) {\n    const t = new Date();\n    t.setHours(0, 0, 0, 0);\n    const c = new Date(cell.date);\n    c.setHours(0, 0, 0, 0);\n    return t.getTime() === c.getTime();\n  }\n  // ---------- Keys de fecha ----------\n  keyFromISO(iso) {\n    // ISO (guardamos al mediodía), así que getDate local es correcto\n    const d = new Date(iso);\n    return this.keyFromDate(d);\n    // YYYY-MM-DD local\n  }\n  keyFromDate(d) {\n    const y = d.getFullYear();\n    const m = (d.getMonth() + 1).toString().padStart(2, '0');\n    const dd = d.getDate().toString().padStart(2, '0');\n    return `${y}-${m}-${dd}`;\n  }\n};\nCalendarComponent = __decorate([Component({\n  selector: 'app-calendar',\n  templateUrl: './calendar.component.html',\n  styleUrls: ['./calendar.component.css']\n}), __metadata(\"design:paramtypes\", [TasksService])], CalendarComponent);\nexport { CalendarComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}